'use strict';

exports.__esModule = true;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _events = require('events');

var _testcafeLegacyApi = require('testcafe-legacy-api');

var _lodash = require('lodash');

var _testRun = require('../test-run');

var _testRun2 = _interopRequireDefault(_testRun);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Const
var QUARANTINE_THRESHOLD = 3;

// Browser job

var BrowserJob = function (_EventEmitter) {
    (0, _inherits3.default)(BrowserJob, _EventEmitter);

    function BrowserJob(tests, browserConnection, proxy, screenshots, warningLog, fixtureHookController, opts) {
        (0, _classCallCheck3.default)(this, BrowserJob);

        var _this = (0, _possibleConstructorReturn3.default)(this, _EventEmitter.call(this));

        _this.started = false;
        _this.quarantine = null;

        _this.opts = opts;
        _this.proxy = proxy;
        _this.browserConnection = browserConnection;
        _this.screenshots = screenshots;
        _this.warningLog = warningLog;
        _this.fixtureHookController = fixtureHookController;

        _this.testRunQueue = tests.map(function (test, index) {
            return _this._createTestRun(test, index + 1, 1);
        });
        _this.completionQueue = [];
        return _this;
    }

    BrowserJob.prototype._shouldStartQuarantine = function _shouldStartQuarantine(testRun) {
        return !this.quarantine && testRun.errs.length;
    };

    BrowserJob.prototype._startQuarantine = function _startQuarantine(testRun, testIndex) {
        this.quarantine = { passed: 0, failed: 1 };
        this._keepInQuarantine(testRun, testIndex);
    };

    BrowserJob.prototype._endQuarantine = function () {
        var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(testRun) {
            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            testRun.unstable = this.quarantine.passed > 0;
                            this.quarantine = null;

                            _context.next = 4;
                            return this._reportTestRunDone(testRun);

                        case 4:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this);
        }));

        function _endQuarantine(_x) {
            return _ref.apply(this, arguments);
        }

        return _endQuarantine;
    }();

    BrowserJob.prototype._shouldKeepInQuarantine = function _shouldKeepInQuarantine(testRun) {
        if (testRun.errs.length) this.quarantine.failed++;else this.quarantine.passed++;

        return this.quarantine.failed < QUARANTINE_THRESHOLD && this.quarantine.passed < QUARANTINE_THRESHOLD;
    };

    BrowserJob.prototype._keepInQuarantine = function _keepInQuarantine(testRun, testIndex) {
        var quarantineAttemptNum = this.quarantine.failed + this.quarantine.passed + 1;
        var nextAttempt = this._createTestRun(testRun.test, testIndex, quarantineAttemptNum);

        this._removeFromCompletionQueue(testRun);
        this.testRunQueue.splice(0, 0, nextAttempt);
    };

    BrowserJob.prototype._testRunDoneInQuarantineMode = function () {
        var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(testRun, testIndex) {
            return _regenerator2.default.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            this.proxy.closeSession(testRun);

                            if (!this._shouldStartQuarantine(testRun)) {
                                _context2.next = 5;
                                break;
                            }

                            this._startQuarantine(testRun, testIndex);

                            _context2.next = 16;
                            break;

                        case 5:
                            if (!this.quarantine) {
                                _context2.next = 14;
                                break;
                            }

                            if (!this._shouldKeepInQuarantine(testRun)) {
                                _context2.next = 10;
                                break;
                            }

                            this._keepInQuarantine(testRun, testIndex);
                            _context2.next = 12;
                            break;

                        case 10:
                            _context2.next = 12;
                            return this._endQuarantine(testRun);

                        case 12:
                            _context2.next = 16;
                            break;

                        case 14:
                            _context2.next = 16;
                            return this._reportTestRunDone(testRun);

                        case 16:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, this);
        }));

        function _testRunDoneInQuarantineMode(_x2, _x3) {
            return _ref2.apply(this, arguments);
        }

        return _testRunDoneInQuarantineMode;
    }();

    BrowserJob.prototype._testRunDone = function () {
        var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(testRun) {
            return _regenerator2.default.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            this.proxy.closeSession(testRun);
                            _context3.next = 3;
                            return this._reportTestRunDone(testRun);

                        case 3:
                        case 'end':
                            return _context3.stop();
                    }
                }
            }, _callee3, this);
        }));

        function _testRunDone(_x4) {
            return _ref3.apply(this, arguments);
        }

        return _testRunDone;
    }();

    BrowserJob.prototype._addToCompletionQueue = function _addToCompletionQueue(testRun) {
        this.completionQueue.push({ testRun: testRun, done: false });
    };

    BrowserJob.prototype._removeFromCompletionQueue = function _removeFromCompletionQueue(testRun) {
        (0, _lodash.remove)(this.completionQueue, function (item) {
            return item.testRun === testRun;
        });
    };

    BrowserJob.prototype._reportTestRunDone = function () {
        var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(testRun) {
            var _this2 = this;

            var completionQueueItem, allDone;
            return _regenerator2.default.wrap(function _callee4$(_context4) {
                while (1) {
                    switch (_context4.prev = _context4.next) {
                        case 0:
                            _context4.next = 2;
                            return this.fixtureHookController.runFixtureAfterHookIfNecessary(testRun);

                        case 2:
                            completionQueueItem = (0, _lodash.find)(this.completionQueue, function (item) {
                                return item.testRun === testRun;
                            });


                            completionQueueItem.done = true;

                            allDone = this.completionQueue.every(function (item) {
                                return item.done;
                            });


                            if (allDone) {
                                this.completionQueue.forEach(function (item) {
                                    return _this2.emit('test-run-done', item.testRun);
                                });

                                this.completionQueue = [];

                                if (!this.hasQueuedTestRuns) this.emit('done');
                            }

                        case 6:
                        case 'end':
                            return _context4.stop();
                    }
                }
            }, _callee4, this);
        }));

        function _reportTestRunDone(_x5) {
            return _ref4.apply(this, arguments);
        }

        return _reportTestRunDone;
    }();

    BrowserJob.prototype._createTestRun = function _createTestRun(test, testIndex, quarantineAttemptNum) {
        var _this3 = this;

        quarantineAttemptNum = this.opts.quarantineMode ? quarantineAttemptNum : null;

        var TestRunCtor = test.isLegacy ? _testcafeLegacyApi.TestRun : _testRun2.default;
        var screenshotCapturer = this.screenshots.createCapturerFor(test, testIndex, quarantineAttemptNum, this.browserConnection);
        var testRun = new TestRunCtor(test, this.browserConnection, screenshotCapturer, this.warningLog, this.opts);
        var done = this.opts.quarantineMode ? function () {
            return _this3._testRunDoneInQuarantineMode(testRun, testIndex);
        } : function () {
            return _this3._testRunDone(testRun);
        };

        testRun.once('start', function () {
            return _this3.emit('test-run-start', testRun);
        });
        testRun.once('done', done);

        return testRun;
    };

    // API


    BrowserJob.prototype.popNextTestRunUrl = function () {
        var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5() {
            var testRun, hookOk;
            return _regenerator2.default.wrap(function _callee5$(_context5) {
                while (1) {
                    switch (_context5.prev = _context5.next) {
                        case 0:
                            if (!this.testRunQueue.length) {
                                _context5.next = 19;
                                break;
                            }

                            if (!this.fixtureHookController.isTestRunBlocked(this.testRunQueue[0])) {
                                _context5.next = 3;
                                break;
                            }

                            return _context5.abrupt('break', 19);

                        case 3:
                            testRun = this.testRunQueue.shift();


                            if (!this.started) {
                                this.started = true;
                                this.emit('start');
                            }

                            this._addToCompletionQueue(testRun);

                            _context5.next = 8;
                            return this.fixtureHookController.runFixtureBeforeHookIfNecessary(testRun);

                        case 8:
                            hookOk = _context5.sent;

                            if (!(testRun.test.skip || !hookOk)) {
                                _context5.next = 15;
                                break;
                            }

                            this.emit('test-run-start', testRun);
                            _context5.next = 13;
                            return this._reportTestRunDone(testRun);

                        case 13:
                            _context5.next = 17;
                            break;

                        case 15:
                            testRun.start();

                            return _context5.abrupt('return', this.proxy.openSession(testRun.test.pageUrl, testRun));

                        case 17:
                            _context5.next = 0;
                            break;

                        case 19:
                            return _context5.abrupt('return', null);

                        case 20:
                        case 'end':
                            return _context5.stop();
                    }
                }
            }, _callee5, this);
        }));

        function popNextTestRunUrl() {
            return _ref5.apply(this, arguments);
        }

        return popNextTestRunUrl;
    }();

    (0, _createClass3.default)(BrowserJob, [{
        key: 'hasQueuedTestRuns',
        get: function get() {
            return !!this.testRunQueue.length;
        }
    }]);
    return BrowserJob;
}(_events.EventEmitter);

exports.default = BrowserJob;
module.exports = exports['default'];