'use strict';

exports.__esModule = true;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

exports.default = wrapTestFunction;

var _testController = require('./test-controller');

var _testController2 = _interopRequireDefault(_testController);

var _testRunTracker = require('./test-run-tracker');

var _testRunTracker2 = _interopRequireDefault(_testRunTracker);

var _processTestFnError = require('../errors/process-test-fn-error');

var _processTestFnError2 = _interopRequireDefault(_processTestFnError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function wrapTestFunction(fn) {
    var _this = this;

    return function () {
        var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(testRun) {
            var result, markeredfn;
            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            result = null;
                            markeredfn = _testRunTracker2.default.addTrackingMarkerToFunction(testRun.id, fn);


                            testRun.controller = new _testController2.default(testRun);

                            _testRunTracker2.default.ensureEnabled();

                            _context.prev = 4;
                            _context.next = 7;
                            return markeredfn(testRun.controller);

                        case 7:
                            result = _context.sent;
                            _context.next = 13;
                            break;

                        case 10:
                            _context.prev = 10;
                            _context.t0 = _context['catch'](4);
                            throw (0, _processTestFnError2.default)(_context.t0);

                        case 13:

                            // NOTE: check if the last command in the test
                            // function is missing the `await` keyword.
                            testRun.controller._checkForMissingAwait();

                            return _context.abrupt('return', result);

                        case 15:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, _this, [[4, 10]]);
        }));

        return function (_x) {
            return _ref.apply(this, arguments);
        };
    }();
}
module.exports = exports['default'];